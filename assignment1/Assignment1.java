/* Generated By:JavaCC: Do not edit this line. Assignment1.java */
public class Assignment1 implements Assignment1Constants {
        public static void main(String args[]) {

                Assignment1 parser;

                if ( args.length == 0 ) {

               System.out.println("Reading from standard input...");
               parser = new Assignment1(System.in);

            } else if (args.length == 1) {
                try {

                        parser = new Assignment1(new java.io.FileInputStream(args[0]));

                } catch (java.io.FileNotFoundException e) {

                        System.err.println("File " + args[0] + " not found.");
                    return;

                }
            } else {

                        System.out.println("Incorrect command entered. Assignment1 can be used with the following commands:");
                System.out.println("    java Assignment1 < file");
                System.out.println("    java Assignment1 file");
                return;

            }

            try {
                parser.Program();
                System.out.println("Program parsed successfully.");

            } catch (ParseException e) {
                System.out.println(e.getMessage());
                System.out.println("Encountered errors while parsing.");
            }

        }

/***********************************
 ***** SECTION 4 - THE GRAMMAR *****
 ***********************************/
  static final public void Program() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
      case CONSTANT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Decl();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case BOOLEAN:
      case VOID:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      Function();
    }
    Main();
  }

  static final public void Decl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      VarDecl();
      break;
    case CONSTANT:
      ConstantDecl();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
  }

  static final public void VarDecl() throws ParseException {
    jj_consume_token(VARIABLE);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    Type();
  }

  static final public void ConstantDecl() throws ParseException {
    jj_consume_token(CONSTANT);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    Type();
    jj_consume_token(COLONEQUALS);
    Expression();
  }

  static final public void Function() throws ParseException {
    Type();
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LEFTBRACKET);
    ParameterList();
    jj_consume_token(RIGHTBRACKET);
    jj_consume_token(IS);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
      case CONSTANT:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      Decl();
    }
    jj_consume_token(BEGIN);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
      case BEGIN:
      case IF:
      case SKIPTEXT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      Statement();
    }
    jj_consume_token(RETURN);
    jj_consume_token(LEFTBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case IDENTIFIER:
    case NUMBER:
    case MINUS:
    case LEFTBRACKET:
      Expression();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(RIGHTBRACKET);
    jj_consume_token(SEMICOLON);
    jj_consume_token(END);
  }

  static final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ParameterList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      NempParameterList();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  static final public void NempParameterList() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    Type();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      NempParameterList();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  static final public void Main() throws ParseException {
    jj_consume_token(MAIN);
    jj_consume_token(BEGIN);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
      case CONSTANT:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
      Decl();
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
      case BEGIN:
      case IF:
      case SKIPTEXT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_6;
      }
      Statement();
    }
    jj_consume_token(END);
  }

  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLONEQUALS:
        jj_consume_token(COLONEQUALS);
        Expression();
        jj_consume_token(SEMICOLON);
        break;
      case LEFTBRACKET:
        jj_consume_token(LEFTBRACKET);
        ArgList();
        jj_consume_token(RIGHTBRACKET);
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case BEGIN:
      jj_consume_token(BEGIN);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHILE:
        case BEGIN:
        case IF:
        case SKIPTEXT:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_7;
        }
        Statement();
      }
      jj_consume_token(END);
      break;
    case IF:
      jj_consume_token(IF);
      Condition();
      jj_consume_token(BEGIN);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHILE:
        case BEGIN:
        case IF:
        case SKIPTEXT:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_8;
        }
        Statement();
      }
      jj_consume_token(END);
      jj_consume_token(ELSE);
      jj_consume_token(BEGIN);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHILE:
        case BEGIN:
        case IF:
        case SKIPTEXT:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_9;
        }
        Statement();
      }
      jj_consume_token(END);
      break;
    case WHILE:
      jj_consume_token(WHILE);
      Condition();
      jj_consume_token(BEGIN);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHILE:
        case BEGIN:
        case IF:
        case SKIPTEXT:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_10;
        }
        Statement();
      }
      jj_consume_token(END);
      break;
    case SKIPTEXT:
      jj_consume_token(SKIPTEXT);
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case IDENTIFIER:
    case NUMBER:
    case MINUS:
      Fragment();
      Expression1();
      break;
    case LEFTBRACKET:
      jj_consume_token(LEFTBRACKET);
      Expression();
      jj_consume_token(RIGHTBRACKET);
      Expression1();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Expression1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      BinaryArithOp();
      Expression();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

  static final public void BinaryArithOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Fragment() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTBRACKET:
        jj_consume_token(LEFTBRACKET);
        ArgList();
        jj_consume_token(RIGHTBRACKET);
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      break;
    case NUMBER:
      jj_consume_token(NUMBER);
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Condition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTBRACKET:
      jj_consume_token(LEFTBRACKET);
      Condition();
      jj_consume_token(RIGHTBRACKET);
      Condition1();
      break;
    case TRUE:
    case FALSE:
    case IDENTIFIER:
    case NUMBER:
    case MINUS:
      Fragment();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
      case NOTEQUAL:
      case LT:
      case GT:
      case LET:
      case GET:
        CompOp();
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      Condition1();
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Condition1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
    case AND:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        jj_consume_token(OR);
        break;
      case AND:
        jj_consume_token(AND);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Condition();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
  }

  static final public void CompOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      jj_consume_token(EQUAL);
      break;
    case NOTEQUAL:
      jj_consume_token(NOTEQUAL);
      break;
    case LT:
      jj_consume_token(LT);
      break;
    case GT:
      jj_consume_token(GT);
      break;
    case LET:
      jj_consume_token(LET);
      break;
    case GET:
      jj_consume_token(GET);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    Expression();
  }

  static final public void ArgList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      NempArgList();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
  }

  static final public void NempArgList() throws ParseException {
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      NempArgList();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public Assignment1TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3000,0x38000,0x3000,0x3000,0x18e00000,0x10180000,0x38000,0x10000000,0x0,0x3000,0x18e00000,0x0,0x18e00000,0x18e00000,0x18e00000,0x18e00000,0x18e00000,0x10180000,0x0,0x0,0x0,0x0,0x10180000,0x0,0x0,0x10180000,0x0,0x0,0x0,0x10000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x85,0x0,0x0,0x8,0x0,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x85,0x6,0x6,0x4,0x80,0x5,0x200,0x3f000,0x85,0xc00,0xc00,0x3f000,0x0,0x8,};
   }

  /** Constructor with InputStream. */
  public Assignment1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Assignment1(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Assignment1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Assignment1(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Assignment1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Assignment1(Assignment1TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Assignment1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[50];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 50; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
